openapi: 3.0.1
info:
  title: Complex resource API
  description: This is the description of the API
  version: 0.0.1
servers:
  - description: ''
    url: 'https://api.liveramp.com/complex-resource'
tags:
  - name: Car
    description: (resource)  this is a Car resource
  - name: 'Car::Wheel'
    description: (subresource)  A wheel is owned by a car
paths:
  /v1/cars:
    post:
      tags:
        - Car
      operationId: Create Car
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarInput'
      responses:
        '201':
          description: Car created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
    get:
      tags:
        - Car
      operationId: Get Cars
      description: ''
      responses:
        '200':
          description: Cars retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of Cars returned by the query
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarMultiResponse'
      parameters:
        - in: query
          name: offset
          description: Offset of the Cars (starting from 0) to include in the response.
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - in: query
          name: limit
          description: Number of Cars to return
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 100
        - in: query
          name: id
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: brand
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/BrandEnum'
            type: string
        - in: query
          name: view
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/ViewEnum'
            type: string
  '/v1/cars/{id}':
    get:
      tags:
        - Car
      operationId: Get Car
      description: ''
      responses:
        '200':
          description: Car retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarOutput'
        '404':
          description: Car not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - in: query
          name: view
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/ViewEnum'
            type: string
  '/v1/cars/{carId}/wheels':
    post:
      tags:
        - 'Car::Wheel'
      operationId: 'Create Car::Wheel'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarWheelInput'
      responses:
        '201':
          description: Wheel created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
        '404':
          description: Parent resource(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: carId
          description: Id of parent Car
          required: true
          schema:
            type: integer
            format: int32
    get:
      tags:
        - 'Car::Wheel'
      operationId: 'Get Car::Wheels'
      description: ''
      responses:
        '200':
          description: Wheels retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of Wheels returned by the query
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarWheelMultiResponse'
        '404':
          description: Parent resource(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: carId
          description: Id of parent Car
          required: true
          schema:
            type: integer
            format: int32
        - in: query
          name: offset
          description: Offset of the Wheels (starting from 0) to include in the response.
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - in: query
          name: limit
          description: Number of Wheels to return
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 100
        - in: query
          name: id
          required: false
          schema:
            type: integer
            format: int32
  '/v1/cars/{carId}/wheels/{id}':
    get:
      tags:
        - 'Car::Wheel'
      operationId: 'Get Car::Wheel'
      description: ''
      responses:
        '200':
          description: Wheel retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarWheelOutput'
        '404':
          description: Wheel or parent resource(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: carId
          description: Id of parent Car
          required: true
          schema:
            type: integer
            format: int32
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
    put:
      tags:
        - 'Car::Wheel'
      operationId: 'Modify Car::Wheel'
      description: ''
      responses:
        '200':
          description: Wheel modified successfully
        '404':
          description: Wheel or parent resource(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: carId
          description: Id of parent Car
          required: true
          schema:
            type: integer
            format: int32
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
components:
  parameters: {}
  schemas:
    simpleresourceManufacturer:
      type: object
      properties:
        company:
          description: this is a company
          type: string
          example: This is a company name
        home:
          type: string
          format: url
          example: 'This is the company website http://{id}}.liveramp.com'
        homeArray:
          items:
            type: string
            format: url
            example: Array of urls
          type: array
        timeToManufacture:
          default: P4D
          type: string
          format: ISO8601 duration
          example: P3Y6M4DT12H30M5S
        other:
          type: string
          format: url
          example: 'https://www.domain.com (url)'
        other2:
          type: string
          format: uri
          example: 'urn:isbn:0-486-27557-4'
      required:
        - company
        - home
        - homeArray
        - other
        - other2
      description: This is a manufacturer
    CarInput:
      type: object
      properties:
        brand:
          allOf:
            - $ref: '#/components/schemas/BrandEnum'
          type: string
        engine:
          allOf:
            - $ref: '#/components/schemas/Specification'
          type: object
        components:
          allOf:
            - $ref: '#/components/schemas/Specification'
          type: object
        homeGarageId:
          type: string
          description: Link to simple-resource.Garage resource via its id
        manufacturer:
          allOf:
            - $ref: '#/components/schemas/simpleresourceManufacturer'
          type: object
        rentedGarageIds:
          description: Link to simple-resource.Garage resources via their ids
          items:
            type: string
          type: array
      required:
        - brand
        - engine
        - components
        - homeGarageId
        - manufacturer
        - rentedGarageIds
      description: this is a Car resource
    CarOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
        bought:
          type: string
          format: ISO8601 UTC date
          example: '2019-04-13'
        brand:
          allOf:
            - $ref: '#/components/schemas/BrandEnum'
          type: string
        engine:
          allOf:
            - $ref: '#/components/schemas/Specification'
          type: object
        components:
          allOf:
            - $ref: '#/components/schemas/Specification'
          type: object
        homeGarageId:
          type: string
          description: Link to simple-resource.Garage resource via its id
        manufacturer:
          allOf:
            - $ref: '#/components/schemas/simpleresourceManufacturer'
          type: object
        rentedGarageIds:
          description: Link to simple-resource.Garage resources via their ids
          items:
            type: string
          type: array
      required:
        - id
        - bought
        - brand
        - engine
        - components
        - homeGarageId
        - manufacturer
        - rentedGarageIds
      description: this is a Car resource
    CarMultiResponse:
      type: object
      properties:
        cars:
          description: Array of retrieved Cars
          type: array
          items:
            $ref: '#/components/schemas/CarOutput'
    ViewEnum:
      type: string
      enum:
        - FULL
        - BRIEF
    Specification:
      type: object
      properties:
        type:
          type: string
        documentation:
          type: string
      required:
        - type
        - documentation
      description: this is a specification!
    CarWheelInput:
      type: object
      properties:
        radius:
          type: number
      required:
        - radius
      description: A wheel is owned by a car
    CarWheelOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
        radius:
          type: number
      required:
        - id
        - radius
      description: A wheel is owned by a car
    CarWheelMultiResponse:
      type: object
      properties:
        wheels:
          description: 'Array of retrieved Car::Wheels'
          type: array
          items:
            $ref: '#/components/schemas/CarWheelOutput'
    BrandEnum:
      type: string
      description: Different brands
      enum:
        - TOYOTA
        - FORD
    StandardError:
      type: object
      properties:
        httpStatus:
          description: HTTP error status code for this problem
          type: integer
          format: int32
        errorCode:
          description: 'Service specific error code, more granular'
          type: string
        message:
          description: 'General, human readable error message'
          type: string
      required:
        - httpStatus
        - errorCode
        - message

