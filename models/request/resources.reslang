

request-resource UploadRequest {
    id: int
    name: string query
    status: UploadRequestStatusEnum
    client: string

	/operations
		POST GET MULTIGET pagination { strategy = offset }
}

singleton subresource UploadRequest::Status {
    id: int
    recordsProcessed: int
    completed: boolean

    /operations
        GET
}

subresource UploadRequest::RecordSet {
    id: int
    company: string
    records: Record[]

    /operations
        GET POST
}

subresource UploadRequest::RecordSet::Deep {
    id: int
    company: string
    records: Record[]

    /operations
        GET POST
}

structure Record {
    details: string
    address: string
}

async action UploadRequest::StartProcessingAction  {
    id: string
    created: datetime

    /operations
        POST
}

sync action UploadRequest::StopProcessingAction {
    id: int
    when: datetime

    /operations
        POST GET
}

// resource level action
sync resource-level action UploadRequest::StartProcessingAction {
    id: int
    when: datetime

    /operations
        POST GET
}

// subresource level action
sync resource-level action UploadRequest::RecordSet::Clear {
    id: int
    when: datetime

    /operations
        POST GET
}

// sub-subresource level action
sync resource-level action UploadRequest::RecordSet::Deep::Jump {
    id: int
    when: datetime

    /operations
        POST GET
}

enum UploadRequestStatusEnum {
    STARTED
    STOPPED
    COMPLETED
}
