openapi: 3.0.1
info:
  title: API for modeling directories and files
  description: This is a simple API for manipulating files
  version: 1.0.0
servers:
  - description: ''
    url: 'https://api.liveramp.com/file'
tags:
  - name: Files and other arrangements
    description: |-
      This is a serious tag
      A really serious one...
  - name: Directories and other musings
    description: |-
      This is a directory tag
      and it describes the functions of the directory resources
  - name: 'Directory::File'
    description: (subresource)  This models a file in a directory
paths:
  /v1/directories:
    post:
      tags:
        - Directories and other musings
      operationId: Create Directory
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryInput'
      responses:
        '201':
          description: Directory created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: 123e4567-e89b-12d3-a456-426655440000
    get:
      tags:
        - Directories and other musings
      operationId: Get Directories
      description: ''
      responses:
        '200':
          description: Directories retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of Directories returned by the query
              schema:
                type: integer
                format: int32
            X-Next-After:
              description: >-
                The opaque token to set as "after" in the next query, to
                continue getting results. If it isn't present, there is no more
                data
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryMultiResponse'
      parameters:
        - in: query
          name: after
          description: >-
            The value returned as X-Next-After in the previous query. Starts
            from beginning if not specified
          schema:
            type: string
        - in: query
          name: limit
          description: Number of Directories to return
          schema:
            type: integer
            format: int32
            default: 20
            minimum: 1
            maximum: 100
        - in: query
          name: id
          required: false
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426655440000
        - in: query
          name: name
          required: false
          schema:
            type: string
  '/v1/directories/{id}':
    get:
      tags:
        - Directories and other musings
      operationId: Get Directory
      description: ''
      responses:
        '200':
          description: Directory retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryOutput'
        '404':
          description: Directory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426655440000
  /v1/file-types:
    post:
      tags:
        - Files and other arrangements
      operationId: Create FileType
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileTypeInput'
      responses:
        '201':
          description: FileType created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
    get:
      tags:
        - Files and other arrangements
      operationId: Get FileTypes
      description: ''
      responses:
        '200':
          description: FileTypes retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of FileTypes returned by the query
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTypeMultiResponse'
      parameters:
        - in: query
          name: offset
          description: >-
            Offset of the FileTypes (starting from 0) to include in the
            response.
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - in: query
          name: limit
          description: Number of FileTypes to return
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 100
        - in: query
          name: type
          required: false
          schema:
            type: string
  '/v1/file-types/{id}':
    get:
      tags:
        - Files and other arrangements
      operationId: Get FileType
      description: Get a FileType
      responses:
        '200':
          description: FileType retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTypeOutput'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialError'
        '404':
          description: FileType not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '405':
          description: Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
  '/v1/directories/{directoryId}/files':
    post:
      tags:
        - 'Directory::File'
      operationId: 'Create Directory::File'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryFileInput'
      responses:
        '201':
          description: File created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
        '404':
          description: Parent resource(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: directoryId
          description: Id of parent Directory
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426655440000
    get:
      tags:
        - 'Directory::File'
      operationId: 'Get Directory::Files'
      description: ''
      responses:
        '200':
          description: Files retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of Files returned by the query
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryFileMultiResponse'
        '404':
          description: Parent resource(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: directoryId
          description: Id of parent Directory
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426655440000
        - in: query
          name: offset
          description: Offset of the Files (starting from 0) to include in the response.
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - in: query
          name: limit
          description: Number of Files to return
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 100
        - in: query
          name: contents
          required: false
          schema:
            type: string
  '/v1/directories/{directoryId}/files/{id}':
    get:
      tags:
        - 'Directory::File'
      operationId: 'Get Directory::File'
      description: ''
      responses:
        '200':
          description: File retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryFileOutput'
        '404':
          description: File or parent resource(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: directoryId
          description: Id of parent Directory
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426655440000
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
  /v1/directory-delete-requests:
    post:
      tags:
        - Directories and other musings
      operationId: Create DirectoryDeleteRequest
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryDeleteRequestInput'
      responses:
        '201':
          description: DirectoryDeleteRequest created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
    get:
      tags:
        - Directories and other musings
      operationId: Get DirectoryDeleteRequests
      description: ''
      responses:
        '200':
          description: DirectoryDeleteRequests retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of DirectoryDeleteRequests returned by the query
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryDeleteRequestMultiResponse'
      parameters:
        - in: query
          name: offset
          description: >-
            Offset of the DirectoryDeleteRequests (starting from 0) to include
            in the response.
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - in: query
          name: limit
          description: Number of DirectoryDeleteRequests to return
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 100
        - in: query
          name: id
          required: false
          schema:
            type: integer
            format: int32
  '/v1/directory-delete-requests/{id}':
    get:
      tags:
        - Directories and other musings
      operationId: Get DirectoryDeleteRequest
      description: ''
      responses:
        '200':
          description: DirectoryDeleteRequest retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryDeleteRequestOutput'
        '404':
          description: Can't find anything
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialError'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
  '/v1/directory-delete-requests/{directoryDeleteRequestId}/actions/cancel':
    post:
      tags:
        - Files and other arrangements
      operationId: Cancel DirectoryDeleteRequest
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelDirectoryDeleteRequestInput'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelDirectoryDeleteRequestOutput'
        '404':
          description: Parent resource(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
      parameters:
        - in: path
          name: directoryDeleteRequestId
          description: Id of parent DirectoryDeleteRequest
          required: true
          schema:
            type: integer
            format: int32
components:
  parameters: {}
  schemas:
    DirectoryInput:
      type: object
      properties:
        name:
          type: string
      required:
        - name
      description: This models a directory we might create
    DirectoryOutput:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
      required:
        - id
        - name
      description: This models a directory we might create
    DirectoryMultiResponse:
      type: object
      properties:
        directories:
          description: Array of retrieved Directories
          type: array
          items:
            $ref: '#/components/schemas/DirectoryOutput'
    FileTypeInput:
      type: object
      properties:
        type:
          type: string
        format:
          type: string
        specId:
          description: this is a specification. comment override
          type: string
        specId2:
          type: string
          description: Link to Specification resource via its id
        specId3s:
          description: array override
          items:
            type: string
          type: array
        specId4s:
          description: Link to Specification resources via their ids
          items:
            type: string
          type: array
      required:
        - type
        - format
        - specId
        - specId2
        - specId3
        - specId4
      description: 'This configures up a file type, e.g. .gif'
    FileTypeOutput:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        format:
          type: string
        specId:
          description: this is a specification. comment override
          type: string
        specId2:
          type: string
          description: Link to Specification resource via its id
        specId3s:
          description: array override
          items:
            type: string
          type: array
        specId4s:
          description: Link to Specification resources via their ids
          items:
            type: string
          type: array
      required:
        - id
        - type
        - format
        - specId
        - specId2
        - specId3
        - specId4
      description: 'This configures up a file type, e.g. .gif'
    FileTypeMultiResponse:
      type: object
      properties:
        fileTypes:
          description: Array of retrieved FileTypes
          type: array
          items:
            $ref: '#/components/schemas/FileTypeOutput'
    DirectoryFileInput:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        fileTypeId:
          type: string
          description: Link to FileType resource via its id
      required:
        - name
        - url
        - fileTypeId
      description: This models a file in a directory
    DirectoryFileOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        url:
          type: string
        fileTypeId:
          type: string
          description: Link to FileType resource via its id
      required:
        - id
        - name
        - url
        - fileTypeId
      description: This models a file in a directory
    DirectoryFileMultiResponse:
      type: object
      properties:
        files:
          description: 'Array of retrieved Directory::Files'
          type: array
          items:
            $ref: '#/components/schemas/DirectoryFileOutput'
    DirectoryDeleteRequestInput:
      type: object
      properties:
        directoryId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
          description: Link to Directory resource via its id
      required:
        - directoryId
      description: This models a long running request
    DirectoryDeleteRequestOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
        directoryId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
          description: Link to Directory resource via its id
      required:
        - id
        - directoryId
      description: This models a long running request
    DirectoryDeleteRequestMultiResponse:
      type: object
      properties:
        directoryDeleteRequests:
          description: Array of retrieved DirectoryDeleteRequests
          type: array
          items:
            $ref: '#/components/schemas/DirectoryDeleteRequestOutput'
    CancelDirectoryDeleteRequestInput:
      type: object
      properties:
        time:
          type: string
          format: ISO8601 UTC date-time
          example: '2019-04-13T03:35:34Z'
      required:
        - time
      description: This models an action on a request
    CancelDirectoryDeleteRequestOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
        time:
          type: string
          format: ISO8601 UTC date-time
          example: '2019-04-13T03:35:34Z'
      required:
        - id
        - time
      description: This models an action on a request
    SpecialError:
      type: object
      properties:
        message:
          type: string
        time:
          type: string
          format: ISO8601 UTC date-time
          example: '2019-04-13T03:35:34Z'
        errors:
          items:
            allOf:
              - $ref: '#/components/schemas/StandardError'
            type: object
          type: array
      required:
        - message
        - time
        - errors
      description: A non-standard error response
    StandardError:
      type: object
      properties:
        httpStatus:
          description: HTTP error status code for this problem
          type: integer
          format: int32
        errorCode:
          description: 'Service specific error code, more granular'
          type: string
        message:
          description: 'General, human readable error message'
          type: string
      required:
        - httpStatus
        - errorCode
        - message

