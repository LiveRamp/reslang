#!/usr/bin/env node

import clip from "clipboardy"
import fs from "fs"
import yaml from "js-yaml"
import DotvizGen from "./gendotviz"
import SwagGen from "./genswagger"
import { clean, readFile } from "./parse"
import yargs from "yargs"
import open from "open"
import ParseGen from "./genparse"
import { exec } from "shelljs"
import lpath from "path"
import { IRules } from "./rules"
const RULES = "rules.json"
const LOCAL_RULES = lpath.join(__dirname, "library", RULES)

export const VERSION = "v1.1.0"

// parse the cmd line
const args = yargs
    .usage("Usage: reslang namespace_directory [focus.reslang]*")
    .option("diagram", {
        type: "string",
        describe: "Create dotviz graphical output of the declared diagram"
    })
    .option("parsed", {
        type: "boolean",
        describe: "Write the parsed output as a tree"
    })
    .option("stdout", {
        type: "boolean",
        describe: "Write output to stdout as well as clipboard"
    })
    .option("open", {
        type: "boolean",
        describe: "Open browser to the appropriate website for output"
    })
    .option("redoc", {
        type: "boolean",
        describe: "Open the redoc viewer rather than the swagger one"
    })
    .option("stacktrace", {
        type: "boolean",
        describe: "Show full stacktrace of any errors"
    })
    .option("rulefile", {
        type: "string",
        describe: "Use the specified rule file rather than the standard one"
    })
    .option("ignorerules", {
        type: "boolean",
        describe: "Don't check the rules"
    })
    .option("testwrite", {
        type: "string",
        describe:
            "Used to regenerated test data - the data will be written to this filename"
    })
    .option("testdir", {
        type: "string",
        describe: "Where the test data is generated to"
    })
    .check(arg => {
        if (arg._.length < 1) {
            throw new Error("Needs a module at least to process")
        }
        return true
    }).argv

// filter out the directories and focus files
const files = args._

// read in the rules structure
const rulesData = readFile(args.rulefile || LOCAL_RULES)
const rules = JSON.parse(rulesData) as IRules
rules.ignoreRules = args.ignorerules ? true : false

const testwrite = args.testwrite
if (testwrite) {
    if (!args.testdir) {
        throw new Error("Must specify testdir and testwrite options together")
    }
    files.forEach(file => {
        const fname = lpath.join(args.testdir || "", file)
        const out = handle([fname], true)
        const ftestname = lpath.join(fname, testwrite)
        process.stdout.write(file + " ")
        fs.writeFileSync(ftestname, out + "\n", { encoding: "utf8" })
    })
} else {
    handle(files, false)
}

function handle(allFiles: string[], silent: boolean) {
    try {
        // generate a parse tree?
        if (args.parsed) {
            const json = new ParseGen(allFiles, rules).generate()
            if (args.stdout) {
                console.log(json)
            } else {
                if (!silent) {
                    console.log("Success - parse tree copied to clipboard")
                }
            }
            clip.writeSync(json)
            return json
        } else if (args.diagram) {
            // generate .viz?
            const dot = new DotvizGen(allFiles, rules)
            const dotviz = dot.generate(args.diagram)
            if (args.stdout) {
                console.log(dotviz)
            } else {
                if (!silent) {
                    console.log("Success - dotviz copied to clipboard")
                }
            }
            clip.writeSync(dotviz)
            if (args.open) {
                open("https://dreampuf.github.io/GraphvizOnline")
            }
            return dotviz
        } else {
            // generate swagger
            const swag = new SwagGen(allFiles, rules)
            const swagger = swag.generate()
            const yml =
                "# generated by Reslang " +
                VERSION +
                "\n" +
                yaml.dump(clean(swagger), { noRefs: true })
            if (args.stdout) {
                console.log(yml)
            } else {
                if (!silent) {
                    console.log("Success - swagger copied to clipboard")
                }
            }
            clip.writeSync(yml)
            if (args.open) {
                if (args.redoc) {
                    // show redoc
                    exec("./show-redoc")
                } else {
                    open("https://editor.swagger.io")
                }
            }
            return yml
        }
    } catch (error) {
        console.error(args.stacktrace ? error : error.message)
    }
}
