openapi: 3.0.1
info:
  title: API of a request
  description: This is the description of the API
  version: 0.0.1
servers:
  - url: 'https://api.liveramp.com/request'
tags:
  - name: UploadRequest
    description: (request) undefined
  - name: UploadRequest / Status
  - name: UploadRequest / RecordSet
  - name: UploadRequest / StartProcessingAction
  - name: UploadRequest / StopProcessingAction
paths:
  /v1/upload-requests:
    post:
      tags:
        - UploadRequest
      operationId: createUploadRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRequestInput'
      responses:
        '200':
          description: UploadRequest created successfully
    get:
      tags:
        - UploadRequest
      operationId: multigetUploadRequest
      parameters:
        - in: query
          name: id
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: UploadRequests retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRequestMultiResponse'
  '/v1/upload-requests/{id}':
    get:
      tags:
        - UploadRequest
      operationId: retrieveUploadRequest
      responses:
        '200':
          description: UploadRequest retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRequestOutput'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
  '/v1/upload-requests/{parentId}/status':
    get:
      tags:
        - UploadRequest / Status
      operationId: retrieveUploadRequest--Status
      responses:
        '200':
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRequest--StatusOutput'
      parameters:
        - in: path
          name: parentId
          description: Id of parent UploadRequest
          required: true
          schema:
            type: integer
            format: int32
  '/v1/upload-requests/{parentId}/record-sets':
    post:
      tags:
        - UploadRequest / RecordSet
      operationId: createRecordSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRequest--RecordSetInput'
      responses:
        '200':
          description: RecordSet created successfully
      parameters:
        - in: path
          name: parentId
          description: Id of parent UploadRequest
          required: true
          schema:
            type: integer
            format: int32
  '/v1/upload-requests/{parentId}/record-sets/{id}':
    get:
      tags:
        - UploadRequest / RecordSet
      operationId: retrieveUploadRequest--RecordSet
      responses:
        '200':
          description: RecordSet retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRequest--RecordSetOutput'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - in: path
          name: parentId
          description: Id of parent UploadRequest
          required: true
          schema:
            type: integer
            format: int32
  '/v1/upload-requests/{parentId}/start-processing-actions':
    post:
      tags:
        - UploadRequest / StartProcessingAction
      operationId: createStartProcessingAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRequest--StartProcessingActionInput'
      responses:
        '200':
          description: StartProcessingAction created successfully
      parameters:
        - in: path
          name: parentId
          description: Id of parent UploadRequest
          required: true
          schema:
            type: integer
            format: int32
  '/v1/upload-requests/{parentId}/stop-processing-actions':
    post:
      tags:
        - UploadRequest / StopProcessingAction
      operationId: createStopProcessingAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRequest--StopProcessingActionInput'
      responses:
        '200':
          description: StopProcessingAction created successfully
      parameters:
        - in: path
          name: parentId
          description: Id of parent UploadRequest
          required: true
          schema:
            type: integer
            format: int32
  '/v1/upload-requests/{parentId}/stop-processing-actions/{id}':
    get:
      tags:
        - UploadRequest / StopProcessingAction
      operationId: retrieveUploadRequest--StopProcessingAction
      responses:
        '200':
          description: StopProcessingAction retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRequest--StopProcessingActionOutput'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - in: path
          name: parentId
          description: Id of parent UploadRequest
          required: true
          schema:
            type: integer
            format: int32
components:
  parameters: {}
  schemas:
    UploadRequestInput:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum:
            - STARTED
            - STOPPED
            - COMPLETED
        client:
          type: string
    UploadRequestOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        status:
          type: string
          enum:
            - STARTED
            - STOPPED
            - COMPLETED
        client:
          type: string
    UploadRequestMultiResponse:
      type: object
      properties:
        page:
          description: 'Page offset, starting from 1'
          type: integer
          format: int32
        page-size:
          description: Size of returned page
          type: integer
          format: int32
        elements:
          description: Array of retrieved UploadRequests
          type: array
          items:
            $ref: '#/components/schemas/UploadRequestOutput'
    UploadRequest--StatusOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
        recordsProcessed:
          type: integer
          format: int32
        completed:
          type: boolean
    UploadRequest--RecordSetInput:
      type: object
      properties:
        company:
          type: string
        records:
          items:
            $ref: '#/components/schemas/RecordStructure'
          type: array
    UploadRequest--RecordSetOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
        company:
          type: string
        records:
          items:
            $ref: '#/components/schemas/RecordStructure'
          type: array
    RecordStructure:
      type: object
      properties:
        details:
          type: string
        address:
          type: string
    UploadRequest--StartProcessingActionInput:
      type: object
      properties: {}
    UploadRequest--StopProcessingActionInput:
      type: object
      properties:
        when:
          type: string
          example: '2019-04-13T03:35:34Z (datetime)'
    UploadRequest--StopProcessingActionOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
        when:
          type: string
          example: '2019-04-13T03:35:34Z (datetime)'
    ErrorBody:
      type: object
      properties:
        http-status:
          type: number
          description: The integer HTTP error status code for this problem
        error-code:
          type: string
          description: 'Service specific error code, more granular'
        message:
          type: string
          description: 'General, human readable error message'
        detail:
          type: string
          description: Human readable message specific to this occurrence
        path:
          type: string
          description: The request field that the error is about

